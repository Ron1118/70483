
Skill 4.5: Store data in and retrieve data from collections
C# programs can create variables that can store single data values, but there are many situations in which data values need to be grouped together. Objects provide one form of grouping. We can create types that describe a particular item, for example the MusicTrack type that we have used throughout the preceding examples. 
Collections are a different way of grouping data. Collections are how we store a large number of objects which are usually all the same type, for example a list of MusicTrack instances. Unlike a database, which can be regarded as a service that provides data storage for an application, a collection is a structure that is stored in computer memory, alongside the program text and other variables. 
We have used collections throughout the text so far. Now it is time to bring together our knowledge of how they work, the different collection types and, most importantly, how to select the right kind of collection for a particular job.
This Skill covers how to:
•	Store and retrieve data by using dictionaries, arrays, lists, sets, and queues
•	Choose a collection type
•	Initialize a collection
•	Add and remove items from a collection
•	Use typed vs. non-typed collections
•	Implement custom collections
•	Implement collection interfaces
Store and retrieve data by using dictionaries, arrays, lists, sets, and queues
Before we can decide what kind of data storage we should use in our programs, we need an understanding of the collection types available to programs. Lets take a look at each in turn, starting with the simplest.
Use an array
An array is the simplest way to create a collection of items of a particular type. An array is assigned a size when it is created and the elements in the array are accessed using an index or subscript value. An array instance is a C# object and is managed by reference. A program creates an array by declaring the array variable and then making the variable refer to an array instance. Square brackets ([ and ]) are used to declare the array and also create the array instance. The statements below create an array variable called intArray which can hold arrays of integer values. The array variable intArray is then made to refer to a new array which contains 5 elements. 
int [] intArray;
intArray = new int[5];
These statements can be combined into a single statement:
int [] intArray = new int[5];
An array of value types (for example an array of integers) holds the values themselves within the array, whereas for an array of reference types (for example an array of objects) each element in the array holds a reference to the object. When an array is created each element in the array is initialized to the default value for that type. Numeric elements are initialized to 0, reference elements to null and Boolean elements to False. Elements in an array can be updated by assigning a new value to the element.
Arrays implement the IEnumerable interface, so they can be enumerated using the foreach construction. 
Once created an array has a fixed length which cannot be changed, but an array reference can be made to refer to a new array object. An array can be initialized when it is created. An array provides a Length property that a program can use to determine the length of the array. 
LISTING 4-55 creates a new array, puts values into two elements and then uses a for loop to print out the contents of the array. It then replaces the existing array with a new one which is initialized to a four-digit sequence and then prints out the contents of the new array using a foreach construction. 
LISTING 4-55 Array example
// Array of integers
int[] intArray = new int[5];

intArray[0] = 99; // put 99 in the first element
intArray[4] = 100; // put 100 in the last element

// Use an index to work through the array     
for (int i = 0; i < intArray.Length; i++)
    Console.WriteLine(intArray[i]);

// Use a foreach to work through the array
foreach (int intValue in intArray)
    Console.WriteLine(intValue);

// Initilaise a new array
intArray = new int [] { 1,2,3,4};

// Use a foreach to work through the array
foreach (int intValue in intArray)
    Console.WriteLine(intValue);
Any array that uses a single index to access the elements in the array is called a one-dimensional array. It is analogous to a list of items. Arrays can have more than one dimension. An array with two dimensions is analogous to a table of data which is made up of rows and columns. An array with three dimensions is analogous to a book containing a number of pages, with a table on each page. If you find yourself thinking that your program needs an array with more than three dimensions I'd advise you to think about arranging your data differently. The code below creates a two-dimensional array called compass which holds the points of the compass. Elements in the array are accessed using a subscript value for each of the array dimensions. Note the use of the comma between the brackets in the declaration of the array variable. This denotes that the array has multiple dimensions.
string [,] compass = new string[3, 3]
{
    { "NW","N","NE" },
    {"W", "C", "E" },
    { "SW", "S", "SE" }
};

Console.WriteLine(compass[0, 0]);  // prints NW
Console.WriteLine(compass[2, 2]);  // prints SE
Use an ArrayList
The usefulness of an array is limited by the way that the programmer must decide in advance the number of items that are to be stored in the array. The size of an array cannot be changed once it has been declared. The ArrayList class was created to address this issue. An ArrayList stores data in a dynamic structure that grows as more items are added to it.  
LISTING 4-56 below shows how it works. An ArrayList is created and three items are added to it. The items in an ArrayList can be accessed with a subscript in exactly the same way as elements in an array. The ArrayList provides a Count property that can be used to count how many items are present.  
LISTING 4-56 ArrayList example
ArrayList arrayList = new ArrayList();

arrayList.Add(1);
arrayList.Add(2);
arrayList.Add(3);

for (int i = 0; i < arrayList.Count; i++)
    Console.WriteLine(arrayList[i]);
The ArrayList provides an Add method that adds items to the end of the list. There is also an Insert method that can be used to insert items in the list and a Remove method that removes items. 
Items in an ArrayList are managed by reference and the reference that is used is of type object. This means that an ArrayList can hold references to any type of object, since the object type is the base type of all of the types in C#. However, this can lead to some programming difficulties. There is nothing to stop a programmer putting any type of object in the same ArrayList. The code below adds an integer, a string and even an ArrayList to the ArrayList called MessyList. While this might be what the programmer wants to do, I don't consider it very good programming practice. 
ArrayList messyList = new ArrayList();
messyList.Add(1); // add an integer to the list
messyList.Add("Rob Miles"); // add a string to the list
messyList.Add(new ArrayList());  //add an ArrayList to the list
Another difficultly with an ArrayList is that all the references in the list are references to objects. When a program removes an item from an ArrayList it must cast the item into its type before it can be used. In other words, to use the int value at the subscript 0 of the messyList above, I have to cast it to an int before I can use it, as shown below:
 int messyInt = (int) messyList[0];
Note that if you are confused to see the value type int being used in an ArrayList, where the contents are managed by reference you should read the section "Boxing and unboxing" in Skill 2.2. 
We have these problems because an ArrayList is an untyped collection. For this reason, the ArrayList has been superseded by the List type, which uses the generics features in later versions of C# to allow a programmer to specify the type of item that the list should hold. For more discussion of the issues with untyped collections see the section "Use typed vs. non-typed collections" later in this Skill. 
Use a List
The List type makes use of the "generics" features of C#. You can find out more about generics in the section "Generic types" in Skill 2.1.  When a program creates a List the type of data that the list is to hold is specified using C# generic notation. Only references of the specified type can be added to the list and values obtained from the list are of the specified type. LISTING 4-57 below shows how a List is used. It creates a list of names, adds two names and then prints out the list using a for loop. It then updates one of the names in the list and uses a foreach construction to print out the changed list. 
LISTING 4-57 List example
List<string> names = new List<string>();

names.Add("Rob Miles");
names.Add("Immy Brown");

for (int i = 0; i < names.Count; i++)
    Console.WriteLine(names[i]);

names[0] = "Fred Bloggs";
foreach (string name in names)
    Console.WriteLine(name);
The List type implements the ICollection and IList interfaces. You can find out more about these interfaces in the section "Implement collection interfaces" later in this section. 
Use a dictionary
A Dictionary allows us to access data using a key. The name Dictionary is very appropriate. If I want to look up a definition of a word I will find the word in a dictionary and read the definition. In the case of an application the key might be an account number or a username. The data could be a bank account or a user record. 

LISTING 4-58 Dictionary example
List<string> names = new List<string>();
